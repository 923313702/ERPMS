//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERPMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ERPMSEntities1 : DbContext
    {
        public ERPMSEntities1()
            : base("name=ERPMSEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SYS_用户信息表> SYS_用户信息表 { get; set; }
        public virtual DbSet<T_EMMS_生产设备编码表> T_EMMS_生产设备编码表 { get; set; }
        public virtual DbSet<T_MCMS_设计订单_Detail_派工工艺> T_MCMS_设计订单_Detail_派工工艺 { get; set; }
        public virtual DbSet<T_MCMS_设计订单_Master> T_MCMS_设计订单_Master { get; set; }
        public virtual DbSet<T_MIMS_材料编码表> T_MIMS_材料编码表 { get; set; }
        public virtual DbSet<T_MIMS_材料类别编码表> T_MIMS_材料类别编码表 { get; set; }
        public virtual DbSet<T_MIMS_材料期初表> T_MIMS_材料期初表 { get; set; }
        public virtual DbSet<T_MIMS_纸张编码表> T_MIMS_纸张编码表 { get; set; }
        public virtual DbSet<T_MIMS_纸张期初库存表> T_MIMS_纸张期初库存表 { get; set; }
        public virtual DbSet<T_OMS_报价单_Detail> T_OMS_报价单_Detail { get; set; }
        public virtual DbSet<T_OMS_报价单_Detail_材料> T_OMS_报价单_Detail_材料 { get; set; }
        public virtual DbSet<T_OMS_报价单_Detail_工艺> T_OMS_报价单_Detail_工艺 { get; set; }
        public virtual DbSet<T_OMS_报价单_Detail_计价> T_OMS_报价单_Detail_计价 { get; set; }
        public virtual DbSet<T_OMS_报价单_Master> T_OMS_报价单_Master { get; set; }
        public virtual DbSet<T_OMS_订单_Detail> T_OMS_订单_Detail { get; set; }
        public virtual DbSet<T_OMS_订单_Detail_材料> T_OMS_订单_Detail_材料 { get; set; }
        public virtual DbSet<T_OMS_订单_Detail_附件> T_OMS_订单_Detail_附件 { get; set; }
        public virtual DbSet<T_OMS_订单_Detail_工艺> T_OMS_订单_Detail_工艺 { get; set; }
        public virtual DbSet<T_OMS_订单_Detail_计价> T_OMS_订单_Detail_计价 { get; set; }
        public virtual DbSet<T_OMS_订单_Master> T_OMS_订单_Master { get; set; }
        public virtual DbSet<T_OMS_订单_发货申请单> T_OMS_订单_发货申请单 { get; set; }
        public virtual DbSet<T_OMS_订单_预收款凭单> T_OMS_订单_预收款凭单 { get; set; }
        public virtual DbSet<T_OMS_工艺类别系数表> T_OMS_工艺类别系数表 { get; set; }
        public virtual DbSet<T_OMS_工艺项目编码表> T_OMS_工艺项目编码表 { get; set; }
        public virtual DbSet<T_OMS_合同_Detail_工艺> T_OMS_合同_Detail_工艺 { get; set; }
        public virtual DbSet<T_OMS_合同_Detail_印品> T_OMS_合同_Detail_印品 { get; set; }
        public virtual DbSet<T_OMS_合同_Master> T_OMS_合同_Master { get; set; }
        public virtual DbSet<T_OMS_基础_加放率表> T_OMS_基础_加放率表 { get; set; }
        public virtual DbSet<T_OMS_基础_印色编码表> T_OMS_基础_印色编码表 { get; set; }
        public virtual DbSet<T_OMS_开数编码表> T_OMS_开数编码表 { get; set; }
        public virtual DbSet<T_OMS_客户_客户对账单> T_OMS_客户_客户对账单 { get; set; }
        public virtual DbSet<T_OMS_客户编码表> T_OMS_客户编码表 { get; set; }
        public virtual DbSet<T_OMS_客户日志记录表> T_OMS_客户日志记录表 { get; set; }
        public virtual DbSet<T_OMS_印品类别编码表> T_OMS_印品类别编码表 { get; set; }
        public virtual DbSet<T_PDMS_物流公司编码表> T_PDMS_物流公司编码表 { get; set; }
        public virtual DbSet<T_PDMS_物流申请单_Detail> T_PDMS_物流申请单_Detail { get; set; }
        public virtual DbSet<T_PDMS_物流申请单_Master> T_PDMS_物流申请单_Master { get; set; }
        public virtual DbSet<T_PHMS_采购申请单_Detail> T_PHMS_采购申请单_Detail { get; set; }
        public virtual DbSet<T_PHMS_采购申请单_Master> T_PHMS_采购申请单_Master { get; set; }
        public virtual DbSet<Table_单据类型编码表> Table_单据类型编码表 { get; set; }
        public virtual DbSet<Table_岗位编码表> Table_岗位编码表 { get; set; }
        public virtual DbSet<Table_岗位人员编码表> Table_岗位人员编码表 { get; set; }
        public virtual DbSet<Table_功能编码表> Table_功能编码表 { get; set; }
        public virtual DbSet<Table_功能岗位编码表> Table_功能岗位编码表 { get; set; }
        public virtual DbSet<Table_人员编码表> Table_人员编码表 { get; set; }
        public virtual DbSet<Table_组织编码表> Table_组织编码表 { get; set; }
        public virtual DbSet<T_OMS_出版_项目编码表> T_OMS_出版_项目编码表 { get; set; }
        public virtual DbSet<T_OMS_业务报价单_Detail> T_OMS_业务报价单_Detail { get; set; }
        public virtual DbSet<T_OMS_业务报价单_Detail_计价> T_OMS_业务报价单_Detail_计价 { get; set; }
        public virtual DbSet<T_OMS_业务报价单_Master> T_OMS_业务报价单_Master { get; set; }
    
        public virtual int Insert_Contract_proc(ObjectParameter no, string customer, string person, Nullable<System.DateTime> zhidan, string provicer, string buyer)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(string));
    
            var personParameter = person != null ?
                new ObjectParameter("person", person) :
                new ObjectParameter("person", typeof(string));
    
            var zhidanParameter = zhidan.HasValue ?
                new ObjectParameter("zhidan", zhidan) :
                new ObjectParameter("zhidan", typeof(System.DateTime));
    
            var provicerParameter = provicer != null ?
                new ObjectParameter("provicer", provicer) :
                new ObjectParameter("provicer", typeof(string));
    
            var buyerParameter = buyer != null ?
                new ObjectParameter("buyer", buyer) :
                new ObjectParameter("buyer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Contract_proc", no, customerParameter, personParameter, zhidanParameter, provicerParameter, buyerParameter);
        }
    
        public virtual int insert_Design_Master(ObjectParameter number, string orderNo, string printCategory, string orderName, string customerNo, string saleMan, string concate, Nullable<int> yeShu, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> finalDate, Nullable<int> chengpin, string opensize, string chengpinsize, Nullable<int> kaishuNumber, string require, string remark, string zhiDan, Nullable<System.DateTime> zhidanDate)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var printCategoryParameter = printCategory != null ?
                new ObjectParameter("printCategory", printCategory) :
                new ObjectParameter("printCategory", typeof(string));
    
            var orderNameParameter = orderName != null ?
                new ObjectParameter("orderName", orderName) :
                new ObjectParameter("orderName", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var saleManParameter = saleMan != null ?
                new ObjectParameter("saleMan", saleMan) :
                new ObjectParameter("saleMan", typeof(string));
    
            var concateParameter = concate != null ?
                new ObjectParameter("concate", concate) :
                new ObjectParameter("concate", typeof(string));
    
            var yeShuParameter = yeShu.HasValue ?
                new ObjectParameter("yeShu", yeShu) :
                new ObjectParameter("yeShu", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("deliveryDate", deliveryDate) :
                new ObjectParameter("deliveryDate", typeof(System.DateTime));
    
            var finalDateParameter = finalDate.HasValue ?
                new ObjectParameter("finalDate", finalDate) :
                new ObjectParameter("finalDate", typeof(System.DateTime));
    
            var chengpinParameter = chengpin.HasValue ?
                new ObjectParameter("chengpin", chengpin) :
                new ObjectParameter("chengpin", typeof(int));
    
            var opensizeParameter = opensize != null ?
                new ObjectParameter("opensize", opensize) :
                new ObjectParameter("opensize", typeof(string));
    
            var chengpinsizeParameter = chengpinsize != null ?
                new ObjectParameter("chengpinsize", chengpinsize) :
                new ObjectParameter("chengpinsize", typeof(string));
    
            var kaishuNumberParameter = kaishuNumber.HasValue ?
                new ObjectParameter("kaishuNumber", kaishuNumber) :
                new ObjectParameter("kaishuNumber", typeof(int));
    
            var requireParameter = require != null ?
                new ObjectParameter("require", require) :
                new ObjectParameter("require", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var zhiDanParameter = zhiDan != null ?
                new ObjectParameter("zhiDan", zhiDan) :
                new ObjectParameter("zhiDan", typeof(string));
    
            var zhidanDateParameter = zhidanDate.HasValue ?
                new ObjectParameter("zhidanDate", zhidanDate) :
                new ObjectParameter("zhidanDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Design_Master", number, orderNoParameter, printCategoryParameter, orderNameParameter, customerNoParameter, saleManParameter, concateParameter, yeShuParameter, deliveryDateParameter, finalDateParameter, chengpinParameter, opensizeParameter, chengpinsizeParameter, kaishuNumberParameter, requireParameter, remarkParameter, zhiDanParameter, zhidanDateParameter);
        }
    
        public virtual int Insert_Invoice(ObjectParameter no, Nullable<System.DateTime> date, string orderNo, string person, string customerNo, string saleman, string address, string address2, string address3, string contact, string contact2, string contact3, string printName, Nullable<decimal> number, Nullable<decimal> f_number, string remork, string z_number, Nullable<System.DateTime> z_date, string f_No)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var personParameter = person != null ?
                new ObjectParameter("person", person) :
                new ObjectParameter("person", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var salemanParameter = saleman != null ?
                new ObjectParameter("Saleman", saleman) :
                new ObjectParameter("Saleman", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var contact2Parameter = contact2 != null ?
                new ObjectParameter("contact2", contact2) :
                new ObjectParameter("contact2", typeof(string));
    
            var contact3Parameter = contact3 != null ?
                new ObjectParameter("contact3", contact3) :
                new ObjectParameter("contact3", typeof(string));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("printName", printName) :
                new ObjectParameter("printName", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(decimal));
    
            var f_numberParameter = f_number.HasValue ?
                new ObjectParameter("f_number", f_number) :
                new ObjectParameter("f_number", typeof(decimal));
    
            var remorkParameter = remork != null ?
                new ObjectParameter("remork", remork) :
                new ObjectParameter("remork", typeof(string));
    
            var z_numberParameter = z_number != null ?
                new ObjectParameter("z_number", z_number) :
                new ObjectParameter("z_number", typeof(string));
    
            var z_dateParameter = z_date.HasValue ?
                new ObjectParameter("z_date", z_date) :
                new ObjectParameter("z_date", typeof(System.DateTime));
    
            var f_NoParameter = f_No != null ?
                new ObjectParameter("f_No", f_No) :
                new ObjectParameter("f_No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Invoice", no, dateParameter, orderNoParameter, personParameter, customerNoParameter, salemanParameter, addressParameter, address2Parameter, address3Parameter, contactParameter, contact2Parameter, contact3Parameter, printNameParameter, numberParameter, f_numberParameter, remorkParameter, z_numberParameter, z_dateParameter, f_NoParameter);
        }
    
        public virtual int Insert_OrderData(ObjectParameter num, string orderName, Nullable<System.DateTime> zhidanDate, string saleMan, string customerNo, string concate, Nullable<int> number, string c_orderNo, string size, string p_category, string unit, string zhuanse, Nullable<System.DateTime> jiaohuoDate, string p_number, string yanggao, string daizou, Nullable<int> liuban, string songhuo, string zhidanPerson, string kehudingse, string jiagong, string biangen, string baozhuang, string address, Nullable<int> isTicket)
        {
            var orderNameParameter = orderName != null ?
                new ObjectParameter("orderName", orderName) :
                new ObjectParameter("orderName", typeof(string));
    
            var zhidanDateParameter = zhidanDate.HasValue ?
                new ObjectParameter("zhidanDate", zhidanDate) :
                new ObjectParameter("zhidanDate", typeof(System.DateTime));
    
            var saleManParameter = saleMan != null ?
                new ObjectParameter("saleMan", saleMan) :
                new ObjectParameter("saleMan", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var concateParameter = concate != null ?
                new ObjectParameter("concate", concate) :
                new ObjectParameter("concate", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            var c_orderNoParameter = c_orderNo != null ?
                new ObjectParameter("c_orderNo", c_orderNo) :
                new ObjectParameter("c_orderNo", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var p_categoryParameter = p_category != null ?
                new ObjectParameter("p_category", p_category) :
                new ObjectParameter("p_category", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var zhuanseParameter = zhuanse != null ?
                new ObjectParameter("zhuanse", zhuanse) :
                new ObjectParameter("zhuanse", typeof(string));
    
            var jiaohuoDateParameter = jiaohuoDate.HasValue ?
                new ObjectParameter("jiaohuoDate", jiaohuoDate) :
                new ObjectParameter("jiaohuoDate", typeof(System.DateTime));
    
            var p_numberParameter = p_number != null ?
                new ObjectParameter("p_number", p_number) :
                new ObjectParameter("p_number", typeof(string));
    
            var yanggaoParameter = yanggao != null ?
                new ObjectParameter("yanggao", yanggao) :
                new ObjectParameter("yanggao", typeof(string));
    
            var daizouParameter = daizou != null ?
                new ObjectParameter("daizou", daizou) :
                new ObjectParameter("daizou", typeof(string));
    
            var liubanParameter = liuban.HasValue ?
                new ObjectParameter("liuban", liuban) :
                new ObjectParameter("liuban", typeof(int));
    
            var songhuoParameter = songhuo != null ?
                new ObjectParameter("songhuo", songhuo) :
                new ObjectParameter("songhuo", typeof(string));
    
            var zhidanPersonParameter = zhidanPerson != null ?
                new ObjectParameter("zhidanPerson", zhidanPerson) :
                new ObjectParameter("zhidanPerson", typeof(string));
    
            var kehudingseParameter = kehudingse != null ?
                new ObjectParameter("kehudingse", kehudingse) :
                new ObjectParameter("kehudingse", typeof(string));
    
            var jiagongParameter = jiagong != null ?
                new ObjectParameter("jiagong", jiagong) :
                new ObjectParameter("jiagong", typeof(string));
    
            var biangenParameter = biangen != null ?
                new ObjectParameter("biangen", biangen) :
                new ObjectParameter("biangen", typeof(string));
    
            var baozhuangParameter = baozhuang != null ?
                new ObjectParameter("baozhuang", baozhuang) :
                new ObjectParameter("baozhuang", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var isTicketParameter = isTicket.HasValue ?
                new ObjectParameter("isTicket", isTicket) :
                new ObjectParameter("isTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_OrderData", num, orderNameParameter, zhidanDateParameter, saleManParameter, customerNoParameter, concateParameter, numberParameter, c_orderNoParameter, sizeParameter, p_categoryParameter, unitParameter, zhuanseParameter, jiaohuoDateParameter, p_numberParameter, yanggaoParameter, daizouParameter, liubanParameter, songhuoParameter, zhidanPersonParameter, kehudingseParameter, jiagongParameter, biangenParameter, baozhuangParameter, addressParameter, isTicketParameter);
        }
    
        public virtual int Insert_OrderPrice_Offer(ObjectParameter primaryKey, string orderNo, string orderName, string customerNo, string saleMan, string contract, Nullable<decimal> printNum, Nullable<int> productNum, string unit, string size, Nullable<int> openNum, string printFunction, Nullable<System.DateTime> date)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var orderNameParameter = orderName != null ?
                new ObjectParameter("orderName", orderName) :
                new ObjectParameter("orderName", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var saleManParameter = saleMan != null ?
                new ObjectParameter("saleMan", saleMan) :
                new ObjectParameter("saleMan", typeof(string));
    
            var contractParameter = contract != null ?
                new ObjectParameter("contract", contract) :
                new ObjectParameter("contract", typeof(string));
    
            var printNumParameter = printNum.HasValue ?
                new ObjectParameter("printNum", printNum) :
                new ObjectParameter("printNum", typeof(decimal));
    
            var productNumParameter = productNum.HasValue ?
                new ObjectParameter("productNum", productNum) :
                new ObjectParameter("productNum", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var openNumParameter = openNum.HasValue ?
                new ObjectParameter("openNum", openNum) :
                new ObjectParameter("openNum", typeof(int));
    
            var printFunctionParameter = printFunction != null ?
                new ObjectParameter("printFunction", printFunction) :
                new ObjectParameter("printFunction", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_OrderPrice_Offer", primaryKey, orderNoParameter, orderNameParameter, customerNoParameter, saleManParameter, contractParameter, printNumParameter, productNumParameter, unitParameter, sizeParameter, openNumParameter, printFunctionParameter, dateParameter);
        }
    
        public virtual int insert_payment_proc(ObjectParameter no, string orderNo, string orderName, string customerNo, string saleMan, Nullable<int> number, string unit, string size, Nullable<decimal> money, Nullable<System.DateTime> date, string contact, Nullable<decimal> advance, Nullable<System.DateTime> delivery, string person, string remark, Nullable<decimal> money2, string payment)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var orderNameParameter = orderName != null ?
                new ObjectParameter("orderName", orderName) :
                new ObjectParameter("orderName", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var saleManParameter = saleMan != null ?
                new ObjectParameter("saleMan", saleMan) :
                new ObjectParameter("saleMan", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var moneyParameter = money.HasValue ?
                new ObjectParameter("money", money) :
                new ObjectParameter("money", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("advance", advance) :
                new ObjectParameter("advance", typeof(decimal));
    
            var deliveryParameter = delivery.HasValue ?
                new ObjectParameter("delivery", delivery) :
                new ObjectParameter("delivery", typeof(System.DateTime));
    
            var personParameter = person != null ?
                new ObjectParameter("person", person) :
                new ObjectParameter("person", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var money2Parameter = money2.HasValue ?
                new ObjectParameter("money2", money2) :
                new ObjectParameter("money2", typeof(decimal));
    
            var paymentParameter = payment != null ?
                new ObjectParameter("payment", payment) :
                new ObjectParameter("payment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_payment_proc", no, orderNoParameter, orderNameParameter, customerNoParameter, saleManParameter, numberParameter, unitParameter, sizeParameter, moneyParameter, dateParameter, contactParameter, advanceParameter, deliveryParameter, personParameter, remarkParameter, money2Parameter, paymentParameter);
        }
    
        public virtual int Insert_Purchase_trigger(ObjectParameter number, string orderNo, string bill, string department, Nullable<System.DateTime> date, string remark, string wuliao, string zhidan, string apply, string charge, string category, string account)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var wuliaoParameter = wuliao != null ?
                new ObjectParameter("wuliao", wuliao) :
                new ObjectParameter("wuliao", typeof(string));
    
            var zhidanParameter = zhidan != null ?
                new ObjectParameter("zhidan", zhidan) :
                new ObjectParameter("zhidan", typeof(string));
    
            var applyParameter = apply != null ?
                new ObjectParameter("apply", apply) :
                new ObjectParameter("apply", typeof(string));
    
            var chargeParameter = charge != null ?
                new ObjectParameter("charge", charge) :
                new ObjectParameter("charge", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Purchase_trigger", number, orderNoParameter, billParameter, departmentParameter, dateParameter, remarkParameter, wuliaoParameter, zhidanParameter, applyParameter, chargeParameter, categoryParameter, accountParameter);
        }
    
        public virtual int Insert_Quotation(ObjectParameter num, string quotaionName, Nullable<int> isTicket, string customerNo, string phone, Nullable<int> productNum, string unit, string saleMan, string printCategory, string productSize, Nullable<decimal> paper, string contractNo, string procuction, Nullable<decimal> packing, Nullable<decimal> transport, Nullable<decimal> warehousing, Nullable<decimal> ticket, string remark, string ask, string singlePerson, Nullable<System.DateTime> singleDate, string tangjin, Nullable<decimal> tangjinPrice, string uVsize, Nullable<decimal> uvPrice)
        {
            var quotaionNameParameter = quotaionName != null ?
                new ObjectParameter("quotaionName", quotaionName) :
                new ObjectParameter("quotaionName", typeof(string));
    
            var isTicketParameter = isTicket.HasValue ?
                new ObjectParameter("isTicket", isTicket) :
                new ObjectParameter("isTicket", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("customerNo", customerNo) :
                new ObjectParameter("customerNo", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var productNumParameter = productNum.HasValue ?
                new ObjectParameter("productNum", productNum) :
                new ObjectParameter("productNum", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var saleManParameter = saleMan != null ?
                new ObjectParameter("saleMan", saleMan) :
                new ObjectParameter("saleMan", typeof(string));
    
            var printCategoryParameter = printCategory != null ?
                new ObjectParameter("printCategory", printCategory) :
                new ObjectParameter("printCategory", typeof(string));
    
            var productSizeParameter = productSize != null ?
                new ObjectParameter("productSize", productSize) :
                new ObjectParameter("productSize", typeof(string));
    
            var paperParameter = paper.HasValue ?
                new ObjectParameter("paper", paper) :
                new ObjectParameter("paper", typeof(decimal));
    
            var contractNoParameter = contractNo != null ?
                new ObjectParameter("contractNo", contractNo) :
                new ObjectParameter("contractNo", typeof(string));
    
            var procuctionParameter = procuction != null ?
                new ObjectParameter("procuction", procuction) :
                new ObjectParameter("procuction", typeof(string));
    
            var packingParameter = packing.HasValue ?
                new ObjectParameter("packing", packing) :
                new ObjectParameter("packing", typeof(decimal));
    
            var transportParameter = transport.HasValue ?
                new ObjectParameter("transport", transport) :
                new ObjectParameter("transport", typeof(decimal));
    
            var warehousingParameter = warehousing.HasValue ?
                new ObjectParameter("Warehousing", warehousing) :
                new ObjectParameter("Warehousing", typeof(decimal));
    
            var ticketParameter = ticket.HasValue ?
                new ObjectParameter("ticket", ticket) :
                new ObjectParameter("ticket", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var askParameter = ask != null ?
                new ObjectParameter("ask", ask) :
                new ObjectParameter("ask", typeof(string));
    
            var singlePersonParameter = singlePerson != null ?
                new ObjectParameter("singlePerson", singlePerson) :
                new ObjectParameter("singlePerson", typeof(string));
    
            var singleDateParameter = singleDate.HasValue ?
                new ObjectParameter("singleDate", singleDate) :
                new ObjectParameter("singleDate", typeof(System.DateTime));
    
            var tangjinParameter = tangjin != null ?
                new ObjectParameter("tangjin", tangjin) :
                new ObjectParameter("tangjin", typeof(string));
    
            var tangjinPriceParameter = tangjinPrice.HasValue ?
                new ObjectParameter("tangjinPrice", tangjinPrice) :
                new ObjectParameter("tangjinPrice", typeof(decimal));
    
            var uVsizeParameter = uVsize != null ?
                new ObjectParameter("UVsize", uVsize) :
                new ObjectParameter("UVsize", typeof(string));
    
            var uvPriceParameter = uvPrice.HasValue ?
                new ObjectParameter("uvPrice", uvPrice) :
                new ObjectParameter("uvPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Quotation", num, quotaionNameParameter, isTicketParameter, customerNoParameter, phoneParameter, productNumParameter, unitParameter, saleManParameter, printCategoryParameter, productSizeParameter, paperParameter, contractNoParameter, procuctionParameter, packingParameter, transportParameter, warehousingParameter, ticketParameter, remarkParameter, askParameter, singlePersonParameter, singleDateParameter, tangjinParameter, tangjinPriceParameter, uVsizeParameter, uvPriceParameter);
        }
    
        public virtual int InsertOrderDetailToDetailPrice(Nullable<double> p_number, string paperNo, Nullable<int> rowNum, string orderNo, string parts, Nullable<decimal> zhengyongshu, Nullable<decimal> houdao, Nullable<decimal> yinshua, string size)
        {
            var p_numberParameter = p_number.HasValue ?
                new ObjectParameter("p_number", p_number) :
                new ObjectParameter("p_number", typeof(double));
    
            var paperNoParameter = paperNo != null ?
                new ObjectParameter("paperNo", paperNo) :
                new ObjectParameter("paperNo", typeof(string));
    
            var rowNumParameter = rowNum.HasValue ?
                new ObjectParameter("rowNum", rowNum) :
                new ObjectParameter("rowNum", typeof(int));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("orderNo", orderNo) :
                new ObjectParameter("orderNo", typeof(string));
    
            var partsParameter = parts != null ?
                new ObjectParameter("parts", parts) :
                new ObjectParameter("parts", typeof(string));
    
            var zhengyongshuParameter = zhengyongshu.HasValue ?
                new ObjectParameter("zhengyongshu", zhengyongshu) :
                new ObjectParameter("zhengyongshu", typeof(decimal));
    
            var houdaoParameter = houdao.HasValue ?
                new ObjectParameter("houdao", houdao) :
                new ObjectParameter("houdao", typeof(decimal));
    
            var yinshuaParameter = yinshua.HasValue ?
                new ObjectParameter("yinshua", yinshua) :
                new ObjectParameter("yinshua", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrderDetailToDetailPrice", p_numberParameter, paperNoParameter, rowNumParameter, orderNoParameter, partsParameter, zhengyongshuParameter, houdaoParameter, yinshuaParameter, sizeParameter);
        }
    
        public virtual int p_Insert_Logistics_Master(ObjectParameter number, string w_number, Nullable<System.DateTime> date, string remork, string personNo, Nullable<System.DateTime> zhidanDate, string shenHe, Nullable<System.DateTime> shenHeDate, string address, string contact, string address1, string contact1, string address2, string contact2, string faHuo, string wuLiu, string way, string jiezhang)
        {
            var w_numberParameter = w_number != null ?
                new ObjectParameter("w_number", w_number) :
                new ObjectParameter("w_number", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var remorkParameter = remork != null ?
                new ObjectParameter("remork", remork) :
                new ObjectParameter("remork", typeof(string));
    
            var personNoParameter = personNo != null ?
                new ObjectParameter("personNo", personNo) :
                new ObjectParameter("personNo", typeof(string));
    
            var zhidanDateParameter = zhidanDate.HasValue ?
                new ObjectParameter("zhidanDate", zhidanDate) :
                new ObjectParameter("zhidanDate", typeof(System.DateTime));
    
            var shenHeParameter = shenHe != null ?
                new ObjectParameter("shenHe", shenHe) :
                new ObjectParameter("shenHe", typeof(string));
    
            var shenHeDateParameter = shenHeDate.HasValue ?
                new ObjectParameter("shenHeDate", shenHeDate) :
                new ObjectParameter("shenHeDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var contact1Parameter = contact1 != null ?
                new ObjectParameter("contact1", contact1) :
                new ObjectParameter("contact1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var contact2Parameter = contact2 != null ?
                new ObjectParameter("contact2", contact2) :
                new ObjectParameter("contact2", typeof(string));
    
            var faHuoParameter = faHuo != null ?
                new ObjectParameter("faHuo", faHuo) :
                new ObjectParameter("faHuo", typeof(string));
    
            var wuLiuParameter = wuLiu != null ?
                new ObjectParameter("wuLiu", wuLiu) :
                new ObjectParameter("wuLiu", typeof(string));
    
            var wayParameter = way != null ?
                new ObjectParameter("way", way) :
                new ObjectParameter("way", typeof(string));
    
            var jiezhangParameter = jiezhang != null ?
                new ObjectParameter("jiezhang", jiezhang) :
                new ObjectParameter("jiezhang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_Insert_Logistics_Master", number, w_numberParameter, dateParameter, remorkParameter, personNoParameter, zhidanDateParameter, shenHeParameter, shenHeDateParameter, addressParameter, contactParameter, address1Parameter, contact1Parameter, address2Parameter, contact2Parameter, faHuoParameter, wuLiuParameter, wayParameter, jiezhangParameter);
        }
    }
}
